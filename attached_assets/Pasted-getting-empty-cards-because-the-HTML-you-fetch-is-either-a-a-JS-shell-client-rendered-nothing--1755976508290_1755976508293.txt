getting “empty” cards because the HTML you fetch is either (a) a JS-shell (client-rendered, nothing in HTML), (b) a bot-challenge page (Cloudflare/Akamai “Just a moment…”), or (c) your fetch runs in the browser (CORS) instead of the server. Fix it by adding a server-side “smart fetch” with a headless fallback + better parsers + clearer errors.

Below is a drop-in Express backend (works great on Replit) that:

tries a normal server fetch,

auto-escalates to Puppeteer if the HTML looks empty/challenged,

returns richer data (tech/pixels/social/robots),

and tells the UI what path it took (mode: 'static' | 'headless') so you can debug quickly.

1) Install deps
npm i express body-parser cheerio puppeteer


(Node 18+ already has fetch; no need for node-fetch.)

2) Replace / add your API in server.js
// server.js (CommonJS)
const express = require('express');
const bodyParser = require('body-parser');
const cheerio = require('cheerio');
const puppeteer = require('puppeteer');

const app = express();
app.use(bodyParser.json({ limit: '1mb' }));

const UA =
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 ' +
  '(KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36';

app.get('/api/health', (_, res) => res.json({ ok: true }));

app.post('/api/scan', async (req, res) => {
  const raw = String(req.body?.url || '').trim();
  if (!raw) return res.status(400).json({ error: 'Missing url' });

  const url = normalizeUrl(raw);

  try {
    // 1) Try static server fetch
    let mode = 'static';
    let { html, status, headers, elapsedMs } = await fetchStatic(url);

    // 2) If page is likely “empty/challenged”, escalate to headless
    if (looksEmpty(html)) {
      const head = await fetchHeadless(url);
      if (head) {
        html = head.html;
        status = head.status ?? status;
        headers = head.headers ?? headers;
        elapsedMs = head.elapsedMs ?? elapsedMs;
        mode = 'headless';
      }
    }

    // 3) Parse
    const $ = cheerio.load(html);
    const seo = parseSEO($, html);
    const { tech, tracking } = detectTechAndTrackers($, html);
    const robots = await parseRobotsAndSitemaps(url);
    const messaging = extractMessaging($);
    const social = extractSocial($);

    res.json({
      input: { url, domain: new URL(url).hostname.replace(/^www\./i, '') },
      response: { status, elapsedMs, server: headers['server'] || null, xPoweredBy: headers['x-powered-by'] || null, mode },
      seo, tech, tracking, robots, messaging, social
    });
  } catch (e) {
    console.error('SCAN_ERROR', e);
    res.status(500).json({ error: e.message || 'Scan failed' });
  }
});

// ---------- helpers ----------

function normalizeUrl(input) {
  try {
    const u = new URL(input);
    if (!/^https?:$/.test(u.protocol)) throw new Error('bad protocol');
    return u.toString();
  } catch {
    return `https://${input.replace(/^https?:\/\//, '')}`;
  }
}

async function fetchStatic(url) {
  const t0 = Date.now();
  const resp = await fetch(url, {
    redirect: 'follow',
    headers: {
      'user-agent': UA,
      'accept-language': 'en-US,en;q=0.9',
      'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
      'upgrade-insecure-requests': '1'
    },
    cache: 'no-store'
  });
  const html = await resp.text();
  return {
    html,
    status: resp.status,
    headers: Object.fromEntries([...resp.headers.entries()]),
    elapsedMs: Date.now() - t0
  };
}

function looksEmpty(html) {
  const lowBody = html.replace(/\s+/g, '').length < 2000;
  const hasChallenge = /Just a moment|cf-browser-verification|cf-chl|Akamai|Access denied/i.test(html);
  const noHead = !/<title>.*<\/title>/i.test(html);
  const noContent = !/(<h1|<meta\s+name="description"|og:|twitter:)/i.test(html);
  return hasChallenge || (lowBody && (noHead || noContent));
}

async function fetchHeadless(url) {
  try {
    const t0 = Date.now();
    const browser = await puppeteer.launch({
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    const page = await browser.newPage();
    await page.setUserAgent(UA);
    await page.setExtraHTTPHeaders({ 'accept-language': 'en-US,en;q=0.9' });
    await page.goto(url, { waitUntil: 'networkidle2', timeout: 20000 });
    // let JS execute, hydrate DOM
    await page.waitForTimeout(1200);
    const html = await page.content();
    const perf = Date.now() - t0;
    await browser.close();
    return { html, elapsedMs: perf, status: 200, headers: {} };
  } catch (e) {
    console.warn('Headless fetch failed:', e.message);
    return null;
  }
}

function parseSEO($, html) {
  const title = $('title').first().text().trim() || '';
  const metaDescription = $('meta[name="description"]').attr('content')?.trim() || '';
  const canonical = $('link[rel="canonical"]').attr('href') || null;
  const robotsMeta = $('meta[name="robots"]').attr('content') || null;

  const og = $('meta[property^="og:"]').length;
  const tw = $('meta[name^="twitter:"]').length;
  const jsonLdBlocks = $('script[type="application/ld+json"]').length;

  const headings = { h1: $('h1').length, h2: $('h2').length, h3: $('h3').length, h4: $('h4').length, h5: $('h5').length, h6: $('h6').length };

  const imgs = $('img').toArray();
  const withAlt = imgs.filter(i => !!($(i).attr('alt') || '').trim()).length;

  const links = $('a[href]').toArray().map(e => ($(e).attr('href') || '').trim());
  const internal = links.filter(h => h.startsWith('/') || h.startsWith('#') || (!/^https?:\/\//i.test(h))).length;
  const external = links.filter(h => /^https?:\/\//i.test(h)).length;

  return {
    title, titleLength: title.length,
    metaDescription, metaDescriptionLength: metaDescription.length,
    canonical, robotsMeta,
    openGraphCount: og, twitterTagCount: tw, jsonLdBlocks,
    headings,
    images: { total: imgs.length, withAlt, withoutAlt: imgs.length - withAlt },
    links: { internal, external }
  };
}

function detectTechAndTrackers($, html) {
  const evidence = [];
  const frameworks = [];
  let cms = null;

  if (html.includes('wp-content') || html.includes('wp-json')) { cms = 'WordPress'; evidence.push('wp-content'); }
  if (html.includes('cdn.shopify.com')) { cms = 'Shopify'; evidence.push('cdn.shopify.com'); }
  if (html.includes('__NEXT_DATA__') || $('script#__NEXT_DATA__').length) { frameworks.push('Next.js'); evidence.push('__NEXT_DATA__'); }
  if (html.includes('window.__NUXT__')) { frameworks.push('Nuxt'); evidence.push('__NUXT__'); }
  if (html.includes('data-reactroot') || html.includes('React.createElement')) { frameworks.push('React'); evidence.push('React'); }

  const srcs = []; const inlines = [];
  $('script').each((_, el) => {
    const s = $(el).attr('src');
    if (s) srcs.push(s);
    else inlines.push($(el).text() || '');
  });
  const test = (re) => srcs.some(s => re.test(s)) || inlines.some(c => re.test(c));

  const analytics = [];
  const ads = [];
  const tagManagers = [];
  const socialPixels = [];
  const thirdParties = [];

  if (test(/googletagmanager\.com\/gtag\/js/i)) analytics.push('GA4 (gtag.js)');
  if (test(/google-analytics\.com\/analytics\.js/i)) analytics.push('Universal Analytics');
  if (test(/static\.hotjar\.com|hotjar\.com\/c\//i)) analytics.push('Hotjar');
  if (test(/cdn\.segment\.com\/analytics\.js/i)) analytics.push('Segment');
  if (test(/mixpanel\.com/i)) analytics.push('Mixpanel');

  if (test(/doubleclick\.net|googlesyndication\.com|googletagservices\.com/i)) ads.push('Google Ads / DoubleClick');
  if (test(/taboola\.com|outbrain\.com/i)) ads.push('Native Ads (Taboola/Outbrain)');

  if (test(/gtm\.js|googletagmanager\.com/i)) tagManagers.push('Google Tag Manager');
  if (test(/connect\.facebook\.net\/.+\/fbevents\.js/i)) socialPixels.push('Meta Pixel');
  if (test(/static\.ads-twitter\.com\/uwt\.js/i)) socialPixels.push('Twitter Pixel');
  if (test(/tiktok\.com\/i18n\/pixel/i)) socialPixels.push('TikTok Pixel');
  if (test(/snap\.sc\/static\/pixie/i)) socialPixels.push('Snap Pixel');

  // crude third-party list
  srcs.forEach(s => {
    try { thirdParties.push(new URL(s).hostname); } catch {}
  });

  return { tech: { cms, frameworks, evidence, thirdParties: Array.from(new Set(thirdParties)) }, tracking: { analytics, ads, tagManagers, socialPixels } };
}

async function parseRobotsAndSitemaps(urlStr) {
  const u = new URL(urlStr);
  const robotsUrl = `${u.protocol}//${u.host}/robots.txt`;
  try {
    const r = await fetch(robotsUrl, { cache: 'no-store', headers: { 'user-agent': UA } });
    if (!r.ok) return { robotsTxt: { present: false, disallowCount: 0, sitemaps: [] }, sitemaps: [] };
    const txt = await r.text();
    const lines = txt.split('\n');
    const disallowCount = lines.filter(l => /^disallow:/i.test(l.trim())).length;
    const sitemaps = lines.filter(l => /^sitemap:/i.test(l.trim())).map(l => l.split(':').slice(1).join(':').trim()).filter(Boolean);

    const sitemapSummaries = [];
    for (const sm of sitemaps.slice(0, 3)) {
      try {
        const xml = await (await fetch(sm, { cache: 'no-store', headers: { 'user-agent': UA } })).text();
        const count = (xml.match(/<loc>/g) || []).length;
        sitemapSummaries.push({ url: sm, urlCount: count });
      } catch {}
    }

    // fallback probe common sitemap paths if none declared
    if (!sitemaps.length) {
      for (const guess of ['/sitemap.xml', '/sitemap_index.xml']) {
        const gUrl = `${u.protocol}//${u.host}${guess}`;
        try {
          const g = await fetch(gUrl, { cache: 'no-store', headers: { 'user-agent': UA } });
          if (g.ok) {
            const xml = await g.text();
            const count = (xml.match(/<loc>/g) || []).length;
            if (count > 0) sitemapSummaries.push({ url: gUrl, urlCount: count });
          }
        } catch {}
      }
    }

    return { robotsTxt: { present: true, disallowCount, sitemaps }, sitemaps: sitemapSummaries };
  } catch {
    return { robotsTxt: { present: false, disallowCount: 0, sitemaps: [] }, sitemaps: [] };
  }
}

function extractMessaging($) {
  const headline = $('h1').first().text().trim() || undefined;
  const subhead = $('h1').nextAll('p').first().text().trim() || $('p').first().text().trim() || undefined;
  const primaryCTA = $('a,button')
    .filter((_, el) => /get started|demo|trial|contact|book|subscribe|sign up/i.test($(el).text()))
    .first().text().trim() || undefined;
  const proof = [];
  $('[class*="logo"], [class*="badge"], img[alt*=trusted], img[alt*=awarded]').each((_, el) => {
    const t = $(el).attr('alt') || $(el).text();
    if (t) proof.push(t.trim());
  });
  return { hero: { headline, subhead, primaryCTA }, socialProof: proof.slice(0, 6), risks: [] };
}

function extractSocial($) {
  const links = new Set();
  $('a[href]').each((_, el) => {
    const href = ($(el).attr('href') || '').trim();
    if (/facebook\.com|instagram\.com|x\.com|twitter\.com|tiktok\.com|youtube\.com|linkedin\.com/i.test(href)) links.add(href);
  });
  return { links: Array.from(links) };
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log('Server listening on', PORT));

3) Frontend: show errors + debug mode

Make sure your click handler posts to /api/scan and surfaces errors + mode:

async function onScan() {
  setLoading(true);
  setError(null);
  setReport(null);
  try {
    const r = await fetch('/api/scan', {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({ url: inputUrl }) // e.g., "barstool.com"
    });
    const json = await r.json();
    if (!r.ok) throw new Error(json.error || `HTTP ${r.status}`);
    setReport(json);
  } catch (e) {
    setError(e.message || 'Failed to scan');
  } finally { setLoading(false); }
}

// in JSX near the top:
{error && <div className="text-red-600 text-sm">Error: {error}</div>}
{report && <div className="text-xs text-gray-500">Fetch mode: {report.response.mode}</div>}


Now when you scan barstool.com, if the static fetch sees a challenge, it will switch to headless mode and you’ll actually get titles/headings/images/etc. If the site truly ships minimal HTML, you’ll still see useful pixels/tech/robots.

Why your current cards are empty

SEO: JS-rendered site → <title> / meta are set client-side → static HTML shows nothing.

Tech & Social: built by JS, links injected at runtime → static scrape misses them.

Robots showed “Present, Disallow 0” because /robots.txt loaded, but the site doesn’t declare sitemaps there; the fallback above probes /sitemap.xml and /sitemap_index.xml too.

Quick QA checklist on your live repl

Open /api/health → { ok: true }

Scan https://example.com → should return filled SEO basics.

Scan barstool.com → confirm Fetch mode: headless and cards populate.

If Puppeteer fails on Replit (rare), check the console for sandbox errors. Replit usually allows --no-sandbox.