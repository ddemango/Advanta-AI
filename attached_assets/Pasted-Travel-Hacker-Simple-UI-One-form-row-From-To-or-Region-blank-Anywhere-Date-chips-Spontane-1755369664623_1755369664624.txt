Travel Hacker ‚Äî Simple UI

One form row: From, To or Region (blank = Anywhere)

Date chips (Spontaneous / This Month / Next Month / Weekend)

Flexibility select (+ nearby airports toggle)

More options (collapsible): cabin, stops, include hotels/cars

One big sticky Find My Deal button

Results show compact deal cards with price + tier

Skeletons while loading; friendly empty/error states

Keyboard & screen-reader friendly

"use client";
import { useEffect, useMemo, useState } from "react";

/* ---- tiny style tokens (no Tailwind required) ---- */
const CSS = `
:root{--bg:#f7fafc;--panel:#ffffff;--text:#0f172a;--muted:#64748b;--line:#e5e7eb;--cta:#275afe}
*{box-sizing:border-box} body{margin:0;background:var(--bg);color:var(--text);font-family:ui-sans-serif,system-ui}
.container{max-width:980px;margin:0 auto;padding:0 16px}
.card{background:var(--panel);border:1px solid var(--line);border-radius:16px;padding:16px}
.row{display:grid;grid-template-columns:1fr 1fr;gap:12px}
@media (max-width:840px){.row{grid-template-columns:1fr}}
.input,.select{border:1px solid var(--line);border-radius:12px;padding:12px;background:#fff}
.chips{display:flex;flex-wrap:wrap;gap:8px;margin-top:8px}
.chip{border:1px solid var(--line);border-radius:999px;padding:8px 12px;background:#fff;cursor:pointer}
.chip.active{background:#0f172a;color:#fff;border-color:#0f172a}
.toggle{display:flex;gap:8px;align-items:center;color:var(--muted);font-size:14px}
.muted{color:var(--muted);font-size:13px}
.cta{position:sticky;bottom:12px;width:100%;background:var(--cta);color:#fff;border:none;border-radius:12px;padding:14px 16px;font-weight:600}
.grid{display:grid;gap:12px;grid-template-columns:1fr 1fr;margin-top:16px}
@media (max-width:840px){.grid{grid-template-columns:1fr}}
.badge{border:1px solid var(--line);border-radius:999px;padding:4px 10px;font-size:12px;color:#334155}
.skeleton{height:88px;border-radius:12px;background:linear-gradient(90deg,#eee,#f5f7fb 40%,#eee 80%);background-size:200% 100%;animation:sh 1.2s infinite}
@keyframes sh{0%{background-position:200% 0}100%{background-position:-200% 0}}
.disclosure{margin-top:10px}
.disclosure summary{cursor:pointer;color:#334155}
`;

type Offer = any;

export default function TravelHackerSimple() {
  const [from, setFrom] = useState("");
  const [to, setTo] = useState("");        // IATA or region (EUROPE/ASIA) or blank = Anywhere
  const [depart, setDepart] = useState("");
  const [ret, setRet] = useState("");
  const [flex, setFlex] = useState<"exact"|"+-3"|"weekend"|"month">("exact");
  const [nearby, setNearby] = useState(true);

  const [cabin, setCabin] = useState("ECONOMY");
  const [maxStops, setMaxStops] = useState<string>("any"); // 'any'|'0'
  const [includeHotels, setIncludeHotels] = useState(false);
  const [includeCars, setIncludeCars] = useState(false);
  const [mistakeBias, setMistakeBias] = useState(true);

  const [loading, setLoading] = useState(false);
  const [offers, setOffers] = useState<Offer[]>([]);
  const [summary, setSummary] = useState("");
  const [error, setError] = useState("");

  useEffect(()=>{ document.title = "Travel Hacker AI ‚Äî Simple"; }, []);

  const chip = (k:string, label:string, onClick:()=>void, active?:boolean)=>(
    <button type="button" className={`chip ${active?"active":""}`} onClick={onClick} aria-pressed={active}>{label}</button>
  );

  function setMonthRange(offset=0){
    const now = new Date();
    const d1 = new Date(now.getFullYear(), now.getMonth()+offset, 8);
    const d2 = new Date(now.getFullYear(), now.getMonth()+offset, 15);
    setDepart(toYMD(d1)); setRet(toYMD(d2));
  }
  function toYMD(d:Date){ return [d.getFullYear(),String(d.getMonth()+1).padStart(2,"0"),String(d.getDate()).padStart(2,"0")].join("-"); }

  const disabled = useMemo(()=> loading || (!from && !to), [loading, from, to]);

  async function findDeals(){
    setLoading(true); setError(""); setOffers([]); setSummary("");
    try{
      const payload:any = {
        origin: (from||"JFK").toUpperCase(),
        destination: to && !/EUROPE|ASIA/i.test(to) ? to.toUpperCase() : null,
        region: /EUROPE|ASIA/i.test(to) ? to.toUpperCase() : null,
        departDate: depart || null,
        returnDate: ret || null,
        flexibility: flex,
        includeNearby: nearby,
        cabin,
        currency: "USD",
        mistakeBias,
        filters: { maxStops: maxStops==="0"?0:null }
      };
      const r = await post("/api/travel/deals/find", payload);
      const list:Offer[] = (r.offers||[]).slice(0,20);
      setOffers(list);
      if (list.length){
        const s = await post("/api/travel/summary", { offers:list.slice(0,8), origin:payload.origin, destination: payload.destination || payload.region || "Anywhere" });
        if (s.summary) setSummary(s.summary);
      }
    }catch(e:any){
      setError("Hmm, something went wrong. Try again or widen dates.");
    }finally{
      setLoading(false);
    }
  }

  return (
    <div>
      <style dangerouslySetInnerHTML={{__html: CSS}} />
      <header style={{textAlign:"center",padding:"32px 16px"}}>
        <div className="container">
          <h1 style={{fontSize:36,margin:"10px 0"}}>Travel Hacker AI</h1>
          <p className="muted">Ultra-cheap roundtrips ¬∑ ‚ö° mistake fares ¬∑ üß≥ budget plans</p>
        </div>
      </header>

      <main className="container">
        <section className="card" aria-labelledby="deal-title">
          <h2 id="deal-title" style={{margin:"0 0 8px"}}>Find My Travel Deal</h2>

          {/* Basic row */}
          <div className="row">
            <div>
              <label htmlFor="from">Departure</label>
              <input id="from" className="input" placeholder="e.g., BNA or Nashville" value={from} onChange={e=>setFrom(e.target.value)} />
              <div className="muted">Tip: turn on ‚Äúnearby airports‚Äù below.</div>
            </div>
            <div>
              <label htmlFor="to">Destination (or Region)</label>
              <input id="to" className="input" placeholder="IATA (FCO) ¬∑ City (Rome) ¬∑ Region (EUROPE) ¬∑ blank = Anywhere" value={to} onChange={e=>setTo(e.target.value)} />
            </div>
          </div>

          {/* Chips */}
          <div className="chips" role="group" aria-label="Quick date picks" style={{marginTop:10}}>
            {chip("spont","‚ö° Spontaneous", ()=>{
              const d1=new Date(); d1.setDate(d1.getDate()+7);
              const d2=new Date(); d2.setDate(d2.getDate()+11);
              setDepart(toYMD(d1)); setRet(toYMD(d2));
            })}
            {chip("this","üìÖ This Month", ()=>setMonthRange(0))}
            {chip("next","üìÖ Next Month", ()=>setMonthRange(1))}
            {chip("week","üóìÔ∏è Weekend", ()=>{
              const d1=new Date(); while(d1.getDay()!==5) d1.setDate(d1.getDate()+1);
              const d2=new Date(d1); d2.setDate(d1.getDate()+2);
              setDepart(toYMD(d1)); setRet(toYMD(d2)); setFlex("weekend");
            }, flex==="weekend")}
          </div>

          {/* Dates + Flex */}
          <div className="row" style={{marginTop:10}}>
            <div>
              <label htmlFor="depart">Departure date</label>
              <input id="depart" type="date" className="input" value={depart} onChange={e=>setDepart(e.target.value)} />
            </div>
            <div>
              <label htmlFor="return">Return date</label>
              <input id="return" type="date" className="input" value={ret} onChange={e=>setRet(e.target.value)} />
            </div>
          </div>

          <div className="row" style={{marginTop:10}}>
            <div>
              <label htmlFor="flex">Date flexibility</label>
              <select id="flex" className="select" value={flex} onChange={e=>setFlex(e.target.value as any)}>
                <option value="exact">Exact dates</option>
                <option value="+-3">¬± 3 days</option>
                <option value="weekend">Weekend only</option>
                <option value="month">Any weekend this month</option>
              </select>
            </div>
            <div className="toggle" style={{alignSelf:"end"}}>
              <input id="nearby" type="checkbox" checked={nearby} onChange={e=>setNearby(e.target.checked)} />
              <label htmlFor="nearby">Include nearby airports</label>
            </div>
          </div>

          {/* Advanced (collapsed) */}
          <details className="disclosure">
            <summary>More options</summary>
            <div className="row" style={{marginTop:10}}>
              <div>
                <label>Cabin</label>
                <select className="select" value={cabin} onChange={e=>setCabin(e.target.value)}>
                  <option>ECONOMY</option><option>PREMIUM_ECONOMY</option><option>BUSINESS</option><option>FIRST</option>
                </select>
              </div>
              <div>
                <label>Stops</label>
                <select className="select" value={maxStops} onChange={e=>setMaxStops(e.target.value)}>
                  <option value="any">Any</option>
                  <option value="0">Non-stop only</option>
                </select>
              </div>
            </div>
            <div className="row" style={{marginTop:10}}>
              <label className="toggle"><input type="checkbox" checked={includeHotels} onChange={e=>{setIncludeHotels(e.target.checked)}}/> Include hotels</label>
              <label className="toggle"><input type="checkbox" checked={includeCars} onChange={e=>{setIncludeCars(e.target.checked)}}/> Include car rentals</label>
            </div>
            <div style={{marginTop:8}}>
              <label className="toggle"><input type="checkbox" checked={mistakeBias} onChange={e=>setMistakeBias(e.target.checked)}/> Prefer mistake-fare-like deals</label>
            </div>
          </details>

          {/* Sticky CTA */}
          <button className="cta" disabled={disabled} onClick={findDeals} aria-disabled={disabled} style={{marginTop:14}}>
            üéØ Find My Deal
          </button>

          {/* Summary / Errors */}
          {summary && <div className="muted" style={{marginTop:10,whiteSpace:"pre-wrap"}}>{summary}</div>}
          {error && <div role="alert" className="card" style={{marginTop:10, borderColor:"#fecaca", background:"#fff1f2", color:"#7f1d1d"}}>{error}</div>}
        </section>

        {/* Results */}
        <section aria-live="polite" className="grid">
          {loading && Array.from({length:6}).map((_,i)=><div key={i} className="skeleton" />)}
          {!loading && offers.length===0 && !error && (
            <div className="card" style={{gridColumn:"1/-1",textAlign:"center"}}>No results yet‚Äîtry ‚Äú¬± 3 days‚Äù or ‚ÄúWeekend‚Äù.</div>
          )}
          {offers.map((o, i)=>(
            <article key={i} className="card">
              <div style={{display:"flex",justifyContent:"space-between",alignItems:"center"}}>
                <h3 style={{margin:0}}>${Number(o.priceUSD||0).toFixed(0)} <span className="muted">USD</span></h3>
                <span className="badge">
                  {o.tier==="unicorn"?"ü¶Ñ mistake-fare-like":o.tier==="great"?"üî• great":o.tier==="cheap"?"‚úÖ cheap":"‚Äî"}
                </span>
              </div>
              <div className="muted" style={{fontSize:12,marginTop:6}}>
                {o._route?`${o._route} ‚Ä¢ `:""}
                {pathLine(o)}
                {o.validatingAirline?` ‚Ä¢ ${o.validatingAirline}`:""} ‚Ä¢ CPM ~${(o.cpm||0).toFixed(2)}/mile
              </div>
            </article>
          ))}
        </section>
      </main>
    </div>
  );
}

/* ---- helpers ---- */
async function post(url:string, body:any){
  const r = await fetch(url,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(body)});
  let data:any; try{ data = await r.json(); }catch{ data = {error:"bad_json"}; }
  if (!r.ok) throw new Error(data.error || `HTTP ${r.status}`);
  return data;
}
function pathLine(o:any){
  const segs = (o.itineraries||[]).flatMap((it:any)=>it.segments||[]);
  if (!segs.length) return "";
  return segs.map((s:any)=>`${s.from}‚Üí${s.to}`).join(" ¬∑ ");
}