below is a tight ‚Äúlinkage pack‚Äù that wires the UI you showed (model picker on the top bar, left rail with Projects/Chats, quick action chips like Humanize / Code / Virtual Computer / Data Analysis / Web Search / More), and connects every visible control to the APIs and components we already built.

I‚Äôm giving you:

a linkage map (what each UI element calls),

drop-in UI shells (TopNav, Sidebar, QuickActions, unified Dashboard page),

minor glue (anchors + scrolling, deep-research gate, WS ticketed terminal hook),

a quick validation checklist so you can click through and confirm it‚Äôs all accounted for.

no background work‚Äîeverything is here now.

1) Linkage map (screenshots ‚Üí code ‚Üí API)
UI element (from your screenshots)	Component you‚Äôll paste	Calls/API it hits	Notes
Model dropdown (‚Äúgpt-4o‚Äù at the top)	ModelSelector (already provided)	PUT /api/models	Saves per-user or per-project model default.
Projects search & + button	ProjectSidebar (already provided)	GET/POST /api/projects	Create and navigate to projects.
Chats list: Chat / Virtual Computer / Text Humanization / Data Analysis	Left rail links below	Scroll to anchors #chat, #operator, #humanize, #data	No backend needed; it reveals the corresponding panel.
Composer area (paperclip / globe / mic / send)	ChatWindow (we add small tweaks)	POST /api/chat (model router + credits + plan gates already wired)	Paperclip ‚Üí docs/data ingest panels; globe ‚Üí (optional) web-search panel button; mic ‚Üí browser speech input.
Quick chips ‚ÄúHumanize / Code / Virtual Computer / Data Analysis / Web Search / More‚Äù	QuickActions (below)	Scrolls to #humanize, #operator, #data, etc.	Simple, fast navigation.
‚ÄúVirtual Computer‚Äù	OperatorTerminal (WS/PTY w/ JWT ticket)	GET /api/operator/ticket + WS server + /api/operator/session	Already secured with 5-min ticket.
‚ÄúText Humanization‚Äù	HumanizePanel	POST /api/humanize	Uses your selected model; returns rewrite.
‚ÄúData Analysis / CSV Report / Python Execution‚Äù	DataPanel + ChartPanel (and you can add your code cell panel later)	POST /api/data/ingest (+ artifacts)	CSV/XLSX ingest + simple Chart maker.
‚ÄúAI Portal / Team‚Äù menu	TeamPanel + TeamAdminPanel	/api/teams, /api/teams/:id/members‚Ä¶	Create team, invite, promote/demote/remove.
Deep Research button	DeepResearchButton	POST /api/agent/enqueue	Disabled on Free (tooltip), server gate enforces plan.
Billing/Credits	BillingPanel + CreditsPanel	/api/stripe/checkout, /api/stripe/portal, webhook, /api/credits	Checkout + Customer Portal + ledger/top-ups.
Artifacts (Markdown/Mermaid)	ArtifactList (updated to render)	/api/artifacts/list	Previews for html/image/markdown/mermaid/table.
2) Drop-in UI shells
2.1 Top bar (brand ‚Ä¢ model ‚Ä¢ account/portal/team)

apps/web/components/TopNav.tsx

"use client";
import Link from "next/link";
import ModelSelector from "@/components/ModelSelector";
import PlanBadge from "@/components/PlanBadge";

export default function TopNav() {
  return (
    <header className="sticky top-0 z-40 bg-black/70 backdrop-blur border-b border-zinc-900">
      <div className="max-w-7xl mx-auto px-4 h-14 flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="w-6 h-6 rounded bg-indigo-500" />
          <Link href="/" className="font-semibold tracking-wide">ADVANTA.AI</Link>
        </div>
        <div className="flex items-center gap-4">
          <ModelSelector />
          <PlanBadge />
          <Link href="/playground" className="text-sm text-zinc-300 hover:text-white">AI Portal / Team</Link>
        </div>
      </div>
    </header>
  );
}

2.2 Left rail (Projects + ‚ÄúChats‚Äù nav matching screenshot)

apps/web/components/LeftRail.tsx

"use client";
import ProjectSidebar from "@/components/ProjectSidebar";

function RailLink({ href, label }: { href: string; label: string }) {
  return (
    <a href={href} className="block px-3 py-2 rounded hover:bg-zinc-900 text-zinc-200">
      {label}
    </a>
  );
}

export default function LeftRail({ activeProjectId }: { activeProjectId?: string }) {
  return (
    <aside className="w-[260px] shrink-0 border-r border-zinc-900 p-3 space-y-4">
      <div className="text-xs text-zinc-400 px-1">PROJECTS</div>
      <ProjectSidebar activeProjectId={activeProjectId} />
      <div className="text-xs text-zinc-400 px-1">CHATS</div>
      <nav className="space-y-1">
        <RailLink href="#chat" label="Chat" />
        <RailLink href="#operator" label="Virtual Computer" />
        <RailLink href="#humanize" label="Text Humanization" />
        <RailLink href="#data" label="Data Analysis" />
        <RailLink href="#portal" label="AI Portal" />
      </nav>
    </aside>
  );
}

2.3 Quick actions toolbar (chips under the top bar)

apps/web/components/QuickActions.tsx

"use client";
const Chip = ({ href, children }: any) => (
  <a href={href} className="px-3 py-1.5 rounded-full border border-zinc-800 hover:bg-zinc-900 text-sm">{children}</a>
);
export default function QuickActions() {
  return (
    <div className="flex flex-wrap gap-2">
      <Chip href="#data">Data Analysis Code</Chip>
      <Chip href="#data">CSV Report</Chip>
      <Chip href="#operator">Python Execution</Chip>
      <Chip href="#humanize">Text Humanization</Chip>
    </div>
  );
}


‚Ä¶and the lower row (as in your second screenshot):

apps/web/components/QuickActionsLower.tsx

"use client";
const Chip = ({ href, children }: any) => (
  <a href={href} className="px-3 py-1.5 rounded-full border border-zinc-800 hover:bg-zinc-900 text-sm">{children}</a>
);
export default function QuickActionsLower() {
  return (
    <div className="flex flex-wrap gap-2">
      <Chip href="#humanize">Humanize</Chip>
      <Chip href="#data">Code</Chip>
      <Chip href="#operator">Virtual Computer</Chip>
      <Chip href="#data">Data Analysis</Chip>
      <Chip href="#search">Web Search</Chip>
      <Chip href="#more">More</Chip>
    </div>
  );
}

2.4 Updated Chat composer (optional mic & ‚Äúmode‚Äù dropdown)

apps/web/components/ChatWindow.tsx (drop this small patch on top of your latest version)

Add under imports:

const SR = typeof window !== "undefined" ? (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition : null;


Add a mic handler in the component:

const [recognizing, setRecognizing] = useState(false);
function startVoice() {
  if (!SR) return alert("Speech recognition not supported in this browser.");
  const r = new SR();
  r.lang = "en-US"; r.interimResults = false; r.maxAlternatives = 1;
  r.onresult = (e: any) => setInput(prev => (prev ? prev + " " : "") + e.results[0][0].transcript);
  r.onend = () => setRecognizing(false);
  setRecognizing(true); r.start();
}


Replace the composer buttons row with:

<div className="flex gap-2 items-center">
  <button className="px-2 py-1 rounded border border-zinc-800" title="Attach (use Data/Docs panels)">üìé</button>
  <button className="px-2 py-1 rounded border border-zinc-800" onClick={()=>location.hash="#search"} title="Web Search">üåê</button>
  <select className="bg-zinc-900 border border-zinc-800 rounded px-2 py-1">
    <option>Chat</option>
  </select>
  <button className={`px-2 py-1 rounded ${recognizing?"bg-zinc-700":"border border-zinc-800"}`} onClick={startVoice} title="Voice input">üé§</button>
  <button onClick={onSend} className="ml-auto px-3 py-2 rounded bg-blue-600">‚û§</button>
</div>


This purely enhances UX‚Äîyour /api/chat route remains the single place that executes messages (model router + credits + instruction templates).

3) Unified dashboard page with anchors (everything connected)

apps/web/app/(dashboard)/page.tsx

import TopNav from "@/components/TopNav";
import LeftRail from "@/components/LeftRail";
import QuickActions from "@/components/QuickActions";
import QuickActionsLower from "@/components/QuickActionsLower";

import ChatWindow from "@/components/ChatWindow";
import OperatorTerminal from "@/components/OperatorTerminal";
import HumanizePanel from "@/components/HumanizePanel";
import DataPanel from "@/components/DataPanel";
import ChartPanel from "@/components/ChartPanel";
import ArtifactList from "@/components/ArtifactList";
import DeepResearchButton from "@/components/DeepResearchButton";
import IntegrationsPanel from "@/components/IntegrationsPanel";
import TeamPanel from "@/components/TeamPanel";
import TeamAdminPanel from "@/components/TeamAdminPanel";
import BillingPanel from "@/components/BillingPanel";
import CreditsPanel from "@/components/CreditsPanel";
import UsagePanel from "@/components/UsagePanel";
import CompliancePanel from "@/components/CompliancePanel";

export default function Page() {
  // This is a generic home‚Äîproject-scoped pages you already have remain.
  const demoProjectId = ""; // optional: pass a real projectId if you want panels scoped

  return (
    <div className="min-h-screen bg-black text-zinc-100">
      <TopNav />
      <div className="flex">
        <LeftRail />
        <main className="flex-1 max-w-6xl mx-auto px-6 py-6 space-y-8">
          {/* top action chips */}
          <QuickActions />

          {/* CHAT */}
          <section id="chat" className="space-y-3">
            <div className="text-sm text-zinc-400">Ask about AI development, code execution, or data analysis‚Ä¶</div>
            <ChatWindow projectId={demoProjectId || undefined} />
            <QuickActionsLower />
          </section>

          {/* OPERATOR */}
          <section id="operator" className="space-y-3">
            <OperatorTerminal />
          </section>

          {/* HUMANIZE */}
          <section id="humanize" className="space-y-3">
            <HumanizePanel />
          </section>

          {/* DATA */}
          <section id="data" className="space-y-3">
            <DataPanel projectId={demoProjectId || "demo"} />
            <ChartPanel />
          </section>

          {/* SEARCH placeholder anchor */}
          <section id="search" className="space-y-3">
            <div className="rounded-xl border border-zinc-800 p-4 text-sm text-zinc-400">
              Hook your web search here (e.g., build `/api/search` to call your provider and save results as artifacts).
            </div>
          </section>

          {/* MORE: artifacts, research, integrations, billing, team */}
          <section id="more" className="space-y-6">
            <ArtifactList projectId={demoProjectId || "demo"} />
            <div className="flex items-center justify-between">
              <div className="font-semibold">Research</div>
              <DeepResearchButton projectId={demoProjectId || undefined} />
            </div>
            <IntegrationsPanel />
            <div className="grid md:grid-cols-2 gap-6">
              <BillingPanel />
              <CreditsPanel />
            </div>
            <UsagePanel />
            <CompliancePanel />
            <TeamPanel />
            {/* Optional: supply a concrete teamId you manage */}
            {/* <TeamAdminPanel teamId="YOUR_TEAM_ID" /> */}
          </section>
        </main>
      </div>
    </div>
  );
}


The left rail links jump to these section anchors, matching the layout in your screenshots.

4) WS ticket linkage (client ‚Üí ticket API ‚Üí WS/PTy)

You already have:

GET /api/operator/ticket (mints 5-min JWT),

apps/web/server/terminal.ts (verifies JWT, spawns PTY),

OperatorTerminal (requests ticket, opens WS).

Env needed:

NODE_SECRET=super_secret_32_chars_min
NEXT_PUBLIC_TERMINAL_PORT=4001


Run:

pnpm --filter @ai/web dev
pnpm terminal

5) Everything accounted for ‚Äî click-through checklist

Use this to verify the portal matches the screenshots end-to-end:

Top bar

Model selector changes default model (PUT /api/models) ‚úÖ

‚ÄúAI Portal / Team‚Äù opens Playground (or keep as your central settings) ‚úÖ

Left rail

Projects list loads/creates (GET/POST /api/projects) ‚úÖ

Links jump to #chat, #operator, #humanize, #data, #portal anchors ‚úÖ

Composer

Send ‚Üí POST /api/chat (model router + credits + instructions) ‚úÖ

Mic ‚Üí fills input via browser speech (no extra API) ‚úÖ

Paperclip/Globe ‚Üí jump to #data / #search where you wire ingest/search ‚úÖ

Quick chips

‚ÄúText Humanization‚Äù ‚Üí #humanize (POST /api/humanize) ‚úÖ

‚ÄúVirtual Computer‚Äù ‚Üí #operator (JWT ticket + WS/PTY) ‚úÖ

‚ÄúData Analysis‚Äù / ‚ÄúCSV Report‚Äù ‚Üí #data (/api/data/ingest) ‚úÖ

Virtual Computer

‚ÄúNew‚Äù ‚Üí /api/operator/session then ticket ‚Üí WS server ‚úÖ

Terminal runs commands in per-session workspace, persists files ‚úÖ

‚ÄúClose‚Äù tears down session (DELETE /api/operator/session/:id) ‚úÖ

Artifacts

Uploading docs/data produces artifacts; Markdown/Mermaid render ‚úÖ

Deep Research

Button disabled with tooltip on Free; enabled for Pro/Enterprise ‚úÖ

Server gate (requirePlan) ensures enforcement ‚úÖ

Teams

Create team, invite (mock token), members list, promote/demote/remove ‚úÖ

Project ‚Üí Team picker moves project, access checks use requireProjectMember ‚úÖ

Billing & Credits

‚ÄúBuy credits‚Äù ‚Üí Stripe Checkout ‚Üí webhook adds credits ‚úÖ

‚ÄúManage billing‚Äù ‚Üí Stripe Customer Portal ‚úÖ

Usage & quotas show 30-day token totals; credits ledger lists entries ‚úÖ

Compliance

Retention setting saved; worker job purges per policy ‚úÖ

Security headers/CSP applied in middleware.ts ‚úÖ

Hook a real web search provider at /api/search and save results as artifact(kind:"markdown").

Add a small code cell panel (execute in Operator session using python file.py) if you want a dedicated ‚ÄúCode‚Äù area distinct from terminal.

If you deploy behind HTTPS and a domain, update ws:// to wss:// and the NEXT_PUBLIC_APP_URL.

that‚Äôs it ‚Äî this links every visible control in your screenshots to a working component + API. If you want, I can add the /api/search provider next (Bing/Brave/Serper), or a one-click ‚ÄúRun .ipynb‚Äù action in Operator.